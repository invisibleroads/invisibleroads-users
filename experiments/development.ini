[app:main]
use = egg:{{cookiecutter.package_name}}
data.folder = %(here)s/development_data
{%- if cookiecutter.database_package == 'records' %}
sqlalchemy.url = sqlite:///%(data.folder)s/database.sqlite
retry.attempts = 3
database.extensions =
{%- endif %}

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =

client_cache.http.expiration_time_in_seconds = 3600
server_cache.function.backend = dogpile.cache.memory
server_cache.function.expiration_time = 3600

# Restrict cross origin resource sharing
# cors.allowed_origins =
# cors.allowed_methods =
# cors.allowed_headers =
# Set application environment variables
application.environment =
# Set minimum length for random strings
secret.length = 128

{%- if cookiecutter.security_package == 'users' %}
# redis.sessions.url = redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DATABASE}
# redis.sessions.secret = ${REDIS_SESSIONS_SECRET}
redis.sessions.timeout = 43200
redis.sessions.cookie_name = s
# redis.sessions.cookie_secure = false
# redis.sessions.cookie_httponly = true
redis.sessions.prefix = session.

auth_sanity.source = session
auth_sanity.debug = false
auth_sanity.session.value_key = sanity.

user.id.length = 32

invisibleroads_users.mock = true
invisibleroads_users.storage = database
# invisibleroads_users.secret = ${INVISIBLEROADS_USERS_SECRET}
invisibleroads_users.user_mixin = invisibleroads_users.models.UserMixin
invisibleroads_users.cookie_secure = false
invisibleroads_users.cookie_httponly = true
invisibleroads_users.verify_tls = true
invisibleroads_users.auth_state_length = 64
invisibleroads_users.public_attributes = name email image_url
invisibleroads_users.default_permission = see
invisibleroads_users.require_csrf = true

invisibleroads_users.auth_providers = google linkedin

# https://accounts.google.com/.well-known/openid-configuration
invisibleroads_users.auth_providers.google.auth_scopes = openid email profile
invisibleroads_users.auth_providers.google.consumer_key = ${GOOGLE_AUTH_KEY}
invisibleroads_users.auth_providers.google.consumer_secret = ${GOOGLE_AUTH_SECRET}
invisibleroads_users.auth_providers.google.form_url = https://accounts.google.com/o/oauth2/v2/auth
invisibleroads_users.auth_providers.google.token_url = https://oauth2.googleapis.com/token
invisibleroads_users.auth_providers.google.resource_url = https://openidconnect.googleapis.com/v1/userinfo
invisibleroads_users.auth_providers.google.compliance_fixes =

# https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow
invisibleroads_users.auth_providers.linkedin.auth_scopes =
invisibleroads_users.auth_providers.linkedin.consumer_key = ${LINKEDIN_AUTH_KEY}
invisibleroads_users.auth_providers.linkedin.consumer_secret = ${LINKEDIN_AUTH_SECRET}
invisibleroads_users.auth_providers.linkedin.form_url = https://www.linkedin.com/oauth/v2/authorization
invisibleroads_users.auth_providers.linkedin.token_url = https://www.linkedin.com/oauth/v2/accessToken
invisibleroads_users.auth_providers.linkedin.resource_url = https://api.linkedin.com/v2/me
invisibleroads_users.auth_providers.linkedin.compliance_fixes =
    requests_oauthlib.compliance_fixes.linkedin_compliance_fix
{%- endif %}

[server:main]
use = egg:waitress#main
listen = 127.0.0.1:5000

{%- if cookiecutter.database_package == 'records' %}
[pshell]
setup = invisibleroads_records.shells.setup
M = {{cookiecutter.package_name}}.models
[alembic]
script_location = {{cookiecutter.package_name}}/migrations
file_template = %%(year)d%%(month).2d%%(day).2d-%%(rev)s
{%- endif %}

[loggers]
{%- if cookiecutter.database_package == 'records' %}
keys = root, {{cookiecutter.package_name}}, sqlalchemy
{%- else %}
keys = root, {{cookiecutter.package_name}}
{%- endif %}
[handlers]
keys = console
[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console
[logger_{{cookiecutter.package_name}}]
level = DEBUG
handlers =
qualname = {{cookiecutter.package_name}}
{%- if cookiecutter.database_package == 'records' %}
[logger_sqlalchemy]
level = DEBUG
handlers =
qualname = sqlalchemy.engine
{%- endif %}

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
