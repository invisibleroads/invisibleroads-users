#!/usr/bin/env python
from argparse import ArgumentParser
from collections import defaultdict
from itertools import izip
from stevedore.extension import ExtensionManager


class ReflectiveArgumentParser(ArgumentParser):

    def has_argument(self, dest):
        for action in self._actions:
            if action.dest == dest:
                return True
        return False


def get_scripts_by_name(namespace):
    scripts_by_name = defaultdict(list)
    extension_manager = ExtensionManager(namespace, invoke_on_load=True)
    for name, extension in izip(
            extension_manager.names(), extension_manager.extensions):
        scripts_by_name[name].append(extension.obj)
    for name, scripts in scripts_by_name.iteritems():
        scripts_by_name[name] = sorted(scripts, key=lambda x: x.priority)
    return scripts_by_name


if __name__ == '__main__':
    argument_parser = ReflectiveArgumentParser()
    argument_subparsers = argument_parser.add_subparsers(dest='command')
    scripts_by_name = get_scripts_by_name('invisibleroads')
    for name, scripts in scripts_by_name.iteritems():
        argument_subparser = argument_subparsers.add_parser(name)
        for script in scripts:
            script.configure(argument_subparser)
    args = argument_parser.parse_args()
    for script in scripts_by_name[args.command]:
        script.run(args)
